"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/canvas-size";
exports.ids = ["vendor-chunks/canvas-size"];
exports.modules = {

/***/ "(ssr)/./node_modules/canvas-size/dist/canvas-size.esm.js":
/*!**********************************************************!*\
  !*** ./node_modules/canvas-size/dist/canvas-size.esm.js ***!
  \**********************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ canvasSize)\n/* harmony export */ });\n/*!\n * canvas-size\n * v1.2.6\n * https://github.com/jhildenbiddle/canvas-size\n * (c) 2015-2023 John Hildenbiddle <http://hildenbiddle.com>\n * MIT license\n */\nfunction _iterableToArrayLimit(arr, i) {\n    var _i = null == arr ? null : \"undefined\" != typeof Symbol && arr[Symbol.iterator] || arr[\"@@iterator\"];\n    if (null != _i) {\n        var _s, _e, _x, _r, _arr = [], _n = !0, _d = !1;\n        try {\n            if (_x = (_i = _i.call(arr)).next, 0 === i) {\n                if (Object(_i) !== _i) return;\n                _n = !1;\n            } else for (;!(_n = (_s = _x.call(_i)).done) && (_arr.push(_s.value), _arr.length !== i); _n = !0) ;\n        } catch (err) {\n            _d = !0, _e = err;\n        } finally {\n            try {\n                if (!_n && null != _i.return && (_r = _i.return(), Object(_r) !== _r)) return;\n            } finally {\n                if (_d) throw _e;\n            }\n        }\n        return _arr;\n    }\n}\n\nfunction ownKeys(object, enumerableOnly) {\n    var keys = Object.keys(object);\n    if (Object.getOwnPropertySymbols) {\n        var symbols = Object.getOwnPropertySymbols(object);\n        enumerableOnly && (symbols = symbols.filter((function(sym) {\n            return Object.getOwnPropertyDescriptor(object, sym).enumerable;\n        }))), keys.push.apply(keys, symbols);\n    }\n    return keys;\n}\n\nfunction _objectSpread2(target) {\n    for (var i = 1; i < arguments.length; i++) {\n        var source = null != arguments[i] ? arguments[i] : {};\n        i % 2 ? ownKeys(Object(source), !0).forEach((function(key) {\n            _defineProperty(target, key, source[key]);\n        })) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach((function(key) {\n            Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));\n        }));\n    }\n    return target;\n}\n\nfunction _defineProperty(obj, key, value) {\n    key = _toPropertyKey(key);\n    if (key in obj) {\n        Object.defineProperty(obj, key, {\n            value: value,\n            enumerable: true,\n            configurable: true,\n            writable: true\n        });\n    } else {\n        obj[key] = value;\n    }\n    return obj;\n}\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n    if (source == null) return {};\n    var target = {};\n    var sourceKeys = Object.keys(source);\n    var key, i;\n    for (i = 0; i < sourceKeys.length; i++) {\n        key = sourceKeys[i];\n        if (excluded.indexOf(key) >= 0) continue;\n        target[key] = source[key];\n    }\n    return target;\n}\n\nfunction _objectWithoutProperties(source, excluded) {\n    if (source == null) return {};\n    var target = _objectWithoutPropertiesLoose(source, excluded);\n    var key, i;\n    if (Object.getOwnPropertySymbols) {\n        var sourceSymbolKeys = Object.getOwnPropertySymbols(source);\n        for (i = 0; i < sourceSymbolKeys.length; i++) {\n            key = sourceSymbolKeys[i];\n            if (excluded.indexOf(key) >= 0) continue;\n            if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;\n            target[key] = source[key];\n        }\n    }\n    return target;\n}\n\nfunction _slicedToArray(arr, i) {\n    return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();\n}\n\nfunction _toConsumableArray(arr) {\n    return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread();\n}\n\nfunction _arrayWithoutHoles(arr) {\n    if (Array.isArray(arr)) return _arrayLikeToArray(arr);\n}\n\nfunction _arrayWithHoles(arr) {\n    if (Array.isArray(arr)) return arr;\n}\n\nfunction _iterableToArray(iter) {\n    if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}\n\nfunction _unsupportedIterableToArray(o, minLen) {\n    if (!o) return;\n    if (typeof o === \"string\") return _arrayLikeToArray(o, minLen);\n    var n = Object.prototype.toString.call(o).slice(8, -1);\n    if (n === \"Object\" && o.constructor) n = o.constructor.name;\n    if (n === \"Map\" || n === \"Set\") return Array.from(o);\n    if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);\n}\n\nfunction _arrayLikeToArray(arr, len) {\n    if (len == null || len > arr.length) len = arr.length;\n    for (var i = 0, arr2 = new Array(len); i < len; i++) arr2[i] = arr[i];\n    return arr2;\n}\n\nfunction _nonIterableSpread() {\n    throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _nonIterableRest() {\n    throw new TypeError(\"Invalid attempt to destructure non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}\n\nfunction _toPrimitive(input, hint) {\n    if (typeof input !== \"object\" || input === null) return input;\n    var prim = input[Symbol.toPrimitive];\n    if (prim !== undefined) {\n        var res = prim.call(input, hint || \"default\");\n        if (typeof res !== \"object\") return res;\n        throw new TypeError(\"@@toPrimitive must return a primitive value.\");\n    }\n    return (hint === \"string\" ? String : Number)(input);\n}\n\nfunction _toPropertyKey(arg) {\n    var key = _toPrimitive(arg, \"string\");\n    return typeof key === \"symbol\" ? key : String(key);\n}\n\nfunction canvasTest(settings) {\n    var size = settings.sizes.shift();\n    var width = Math.max(Math.ceil(size[0]), 1);\n    var height = Math.max(Math.ceil(size[1]), 1);\n    var fill = [ width - 1, height - 1, 1, 1 ];\n    var job = Date.now();\n    var isWorker = typeof WorkerGlobalScope !== \"undefined\" && self instanceof WorkerGlobalScope;\n    var cropCvs, testCvs;\n    if (isWorker) {\n        cropCvs = new OffscreenCanvas(1, 1);\n        testCvs = new OffscreenCanvas(width, height);\n    } else {\n        cropCvs = document.createElement(\"canvas\");\n        cropCvs.width = 1;\n        cropCvs.height = 1;\n        testCvs = document.createElement(\"canvas\");\n        testCvs.width = width;\n        testCvs.height = height;\n    }\n    var cropCtx = cropCvs.getContext(\"2d\");\n    var testCtx = testCvs.getContext(\"2d\");\n    if (testCtx) {\n        testCtx.fillRect.apply(testCtx, fill);\n        cropCtx.drawImage(testCvs, width - 1, height - 1, 1, 1, 0, 0, 1, 1);\n    }\n    var isTestPass = cropCtx && cropCtx.getImageData(0, 0, 1, 1).data[3] !== 0;\n    var benchmark = Date.now() - job;\n    [ cropCvs, testCvs ].forEach((function(cvs) {\n        cvs.height = 0;\n        cvs.width = 0;\n    }));\n    if (isWorker) {\n        postMessage({\n            width: width,\n            height: height,\n            benchmark: benchmark,\n            isTestPass: isTestPass\n        });\n        if (!isTestPass && settings.sizes.length) {\n            canvasTest(settings);\n        }\n    } else if (isTestPass) {\n        settings.onSuccess(width, height, benchmark);\n    } else {\n        settings.onError(width, height, benchmark);\n        if (settings.sizes.length) {\n            canvasTest(settings);\n        }\n    }\n    return isTestPass;\n}\n\nvar testSizes = {\n    area: [ 16384, 14188, 11402, 11180, 10836, 8192, 4096, 1 ],\n    height: [ 8388607, 65535, 32767, 16384, 8192, 4096, 1 ],\n    width: [ 4194303, 65535, 32767, 16384, 8192, 4096, 1 ]\n};\n\nvar _excluded = [ \"onError\", \"onSuccess\" ];\n\nvar defaults = {\n    max: null,\n    min: 1,\n    sizes: [],\n    step: 1024,\n    usePromise: false,\n    useWorker: false,\n    onError: Function.prototype,\n    onSuccess: Function.prototype\n};\n\nvar workerJobs = {};\n\nfunction createSizesArray(settings) {\n    var isArea = settings.width === settings.height;\n    var isWidth = settings.height === 1;\n    var isHeight = settings.width === 1;\n    var sizes = [];\n    if (!settings.width || !settings.height) {\n        settings.sizes.forEach((function(testSize) {\n            var width = isArea || isWidth ? testSize : 1;\n            var height = isArea || isHeight ? testSize : 1;\n            sizes.push([ width, height ]);\n        }));\n    } else {\n        var testMin = settings.min || defaults.min;\n        var testStep = settings.step || defaults.step;\n        var testSize = Math.max(settings.width, settings.height);\n        while (testSize >= testMin) {\n            var width = isArea || isWidth ? testSize : 1;\n            var height = isArea || isHeight ? testSize : 1;\n            sizes.push([ width, height ]);\n            testSize -= testStep;\n        }\n    }\n    return sizes;\n}\n\nfunction handleMethod(settings) {\n    var hasCanvasSupport = window && \"HTMLCanvasElement\" in window;\n    var hasOffscreenCanvasSupport = window && \"OffscreenCanvas\" in window;\n    var jobID = Date.now();\n    var _onError = settings.onError, _onSuccess = settings.onSuccess, settingsWithoutCallbacks = _objectWithoutProperties(settings, _excluded);\n    var worker = null;\n    if (!hasCanvasSupport) {\n        return false;\n    }\n    if (settings.useWorker && hasOffscreenCanvasSupport) {\n        var js = \"\\n            var canvasTest = \".concat(canvasTest.toString(), \";\\n            onmessage = function(e) {\\n                canvasTest(e.data);\\n            };\\n        \");\n        var blob = new Blob([ js ], {\n            type: \"application/javascript\"\n        });\n        var blobURL = URL.createObjectURL(blob);\n        worker = new Worker(blobURL);\n        URL.revokeObjectURL(blobURL);\n        worker.onmessage = function(e) {\n            var _e$data = e.data, width = _e$data.width, height = _e$data.height, benchmark = _e$data.benchmark, isTestPass = _e$data.isTestPass;\n            if (isTestPass) {\n                workerJobs[jobID].onSuccess(width, height, benchmark);\n                delete workerJobs[jobID];\n            } else {\n                workerJobs[jobID].onError(width, height, benchmark);\n            }\n        };\n    }\n    if (settings.usePromise) {\n        return new Promise((function(resolve, reject) {\n            var promiseSettings = _objectSpread2(_objectSpread2({}, settings), {}, {\n                onError: function onError(width, height, benchmark) {\n                    var isLastTest;\n                    if (settings.sizes.length === 0) {\n                        isLastTest = true;\n                    } else {\n                        var _settings$sizes$slice = settings.sizes.slice(-1), _settings$sizes$slice2 = _slicedToArray(_settings$sizes$slice, 1), _settings$sizes$slice3 = _slicedToArray(_settings$sizes$slice2[0], 2), lastWidth = _settings$sizes$slice3[0], lastHeight = _settings$sizes$slice3[1];\n                        isLastTest = width === lastWidth && height === lastHeight;\n                    }\n                    _onError(width, height, benchmark);\n                    if (isLastTest) {\n                        reject({\n                            width: width,\n                            height: height,\n                            benchmark: benchmark\n                        });\n                    }\n                },\n                onSuccess: function onSuccess(width, height, benchmark) {\n                    _onSuccess(width, height, benchmark);\n                    resolve({\n                        width: width,\n                        height: height,\n                        benchmark: benchmark\n                    });\n                }\n            });\n            if (worker) {\n                var onError = promiseSettings.onError, onSuccess = promiseSettings.onSuccess;\n                workerJobs[jobID] = {\n                    onError: onError,\n                    onSuccess: onSuccess\n                };\n                worker.postMessage(settingsWithoutCallbacks);\n            } else {\n                canvasTest(promiseSettings);\n            }\n        }));\n    } else {\n        if (worker) {\n            workerJobs[jobID] = {\n                onError: _onError,\n                onSuccess: _onSuccess\n            };\n            worker.postMessage(settingsWithoutCallbacks);\n        } else {\n            return canvasTest(settings);\n        }\n    }\n}\n\nvar canvasSize = {\n    maxArea: function maxArea() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var sizes = createSizesArray({\n            width: options.max,\n            height: options.max,\n            min: options.min,\n            step: options.step,\n            sizes: _toConsumableArray(testSizes.area)\n        });\n        var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {\n            sizes: sizes\n        });\n        return handleMethod(settings);\n    },\n    maxHeight: function maxHeight() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var sizes = createSizesArray({\n            width: 1,\n            height: options.max,\n            min: options.min,\n            step: options.step,\n            sizes: _toConsumableArray(testSizes.height)\n        });\n        var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {\n            sizes: sizes\n        });\n        return handleMethod(settings);\n    },\n    maxWidth: function maxWidth() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var sizes = createSizesArray({\n            width: options.max,\n            height: 1,\n            min: options.min,\n            step: options.step,\n            sizes: _toConsumableArray(testSizes.width)\n        });\n        var settings = _objectSpread2(_objectSpread2(_objectSpread2({}, defaults), options), {}, {\n            sizes: sizes\n        });\n        return handleMethod(settings);\n    },\n    test: function test() {\n        var options = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};\n        var settings = _objectSpread2(_objectSpread2({}, defaults), options);\n        settings.sizes = _toConsumableArray(settings.sizes);\n        if (settings.width && settings.height) {\n            settings.sizes = [ [ settings.width, settings.height ] ];\n        }\n        return handleMethod(settings);\n    }\n};\n\n\n//# sourceMappingURL=canvas-size.esm.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/canvas-size/dist/canvas-size.esm.js\n");

/***/ })

};
;