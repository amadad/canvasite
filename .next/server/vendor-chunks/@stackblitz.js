"use strict";
/*
 * ATTENTION: An "eval-source-map" devtool has been used.
 * This devtool is neither made for production nor for readable output files.
 * It uses "eval()" calls to create a separate source file with attached SourceMaps in the browser devtools.
 * If you are trying to read the output file, select a different devtool (https://webpack.js.org/configuration/devtool/)
 * or disable the default devtool with "devtool: false".
 * If you are looking for production-ready output files, see mode: "production" (https://webpack.js.org/configuration/mode/).
 */
exports.id = "vendor-chunks/@stackblitz";
exports.ids = ["vendor-chunks/@stackblitz"];
exports.modules = {

/***/ "(ssr)/./node_modules/@stackblitz/sdk/bundles/sdk.m.js":
/*!*******************************************************!*\
  !*** ./node_modules/@stackblitz/sdk/bundles/sdk.m.js ***!
  \*******************************************************/
/***/ ((__unused_webpack_module, __webpack_exports__, __webpack_require__) => {

eval("__webpack_require__.r(__webpack_exports__);\n/* harmony export */ __webpack_require__.d(__webpack_exports__, {\n/* harmony export */   \"default\": () => (/* binding */ StackBlitzSDK)\n/* harmony export */ });\nconst CONNECT_INTERVAL = 500;\nconst CONNECT_MAX_ATTEMPTS = 20;\nconst DEFAULT_FRAME_HEIGHT = 300;\nconst DEFAULT_ORIGIN = \"https://stackblitz.com\";\nconst PROJECT_TEMPLATES = [\n  \"angular-cli\",\n  \"create-react-app\",\n  \"html\",\n  \"javascript\",\n  \"node\",\n  \"polymer\",\n  \"typescript\",\n  \"vue\"\n];\nconst UI_SIDEBAR_VIEWS = [\"project\", \"search\", \"ports\", \"settings\"];\nconst UI_THEMES = [\"light\", \"dark\"];\nconst UI_VIEWS = [\"editor\", \"preview\"];\nconst generators = {\n  clickToLoad: (value) => trueParam(\"ctl\", value),\n  devToolsHeight: (value) => percentParam(\"devtoolsheight\", value),\n  forceEmbedLayout: (value) => trueParam(\"embed\", value),\n  hideDevTools: (value) => trueParam(\"hidedevtools\", value),\n  hideExplorer: (value) => trueParam(\"hideExplorer\", value),\n  hideNavigation: (value) => trueParam(\"hideNavigation\", value),\n  openFile: (value) => stringParams(\"file\", value),\n  showSidebar: (value) => booleanParam(\"showSidebar\", value),\n  sidebarView: (value) => enumParam(\"sidebarView\", value, UI_SIDEBAR_VIEWS),\n  startScript: (value) => stringParams(\"startScript\", value),\n  terminalHeight: (value) => percentParam(\"terminalHeight\", value),\n  theme: (value) => enumParam(\"theme\", value, UI_THEMES),\n  view: (value) => enumParam(\"view\", value, UI_VIEWS),\n  zenMode: (value) => trueParam(\"zenMode\", value)\n};\nfunction buildParams(options = {}) {\n  const params = Object.entries(options).map(([key, value]) => {\n    if (value != null && generators.hasOwnProperty(key)) {\n      return generators[key](value);\n    }\n    return \"\";\n  }).filter(Boolean);\n  return params.length ? `?${params.join(\"&\")}` : \"\";\n}\nfunction trueParam(name, value) {\n  if (value === true) {\n    return `${name}=1`;\n  }\n  return \"\";\n}\nfunction booleanParam(name, value) {\n  if (typeof value === \"boolean\") {\n    return `${name}=${value ? \"1\" : \"0\"}`;\n  }\n  return \"\";\n}\nfunction percentParam(name, value) {\n  if (typeof value === \"number\" && !Number.isNaN(value)) {\n    const clamped = Math.min(100, Math.max(0, value));\n    return `${name}=${encodeURIComponent(Math.round(clamped))}`;\n  }\n  return \"\";\n}\nfunction enumParam(name, value = \"\", allowList = []) {\n  if (allowList.includes(value)) {\n    return `${name}=${encodeURIComponent(value)}`;\n  }\n  return \"\";\n}\nfunction stringParams(name, value) {\n  const values = Array.isArray(value) ? value : [value];\n  return values.filter((val) => typeof val === \"string\" && val.trim() !== \"\").map((val) => `${name}=${encodeURIComponent(val)}`).join(\"&\");\n}\nfunction genID() {\n  return Math.random().toString(36).slice(2, 6) + Math.random().toString(36).slice(2, 6);\n}\nfunction openUrl(route, options) {\n  return `${getOrigin(options)}${route}${buildParams(options)}`;\n}\nfunction embedUrl(route, options) {\n  const config = {\n    forceEmbedLayout: true\n  };\n  if (options && typeof options === \"object\") {\n    Object.assign(config, options);\n  }\n  return `${getOrigin(config)}${route}${buildParams(config)}`;\n}\nfunction getOrigin(options = {}) {\n  const origin = typeof options.origin === \"string\" ? options.origin : DEFAULT_ORIGIN;\n  return origin.replace(/\\/$/, \"\");\n}\nfunction replaceAndEmbed(target, frame, options) {\n  if (!frame || !target || !target.parentNode) {\n    throw new Error(\"Invalid Element\");\n  }\n  if (target.id) {\n    frame.id = target.id;\n  }\n  if (target.className) {\n    frame.className = target.className;\n  }\n  setFrameDimensions(frame, options);\n  target.replaceWith(frame);\n}\nfunction findElement(elementOrId) {\n  if (typeof elementOrId === \"string\") {\n    const element = document.getElementById(elementOrId);\n    if (!element) {\n      throw new Error(`Could not find element with id '${elementOrId}'`);\n    }\n    return element;\n  } else if (elementOrId instanceof HTMLElement) {\n    return elementOrId;\n  }\n  throw new Error(`Invalid element: ${elementOrId}`);\n}\nfunction openTarget(options) {\n  return options && options.newWindow === false ? \"_self\" : \"_blank\";\n}\nfunction setFrameDimensions(frame, options = {}) {\n  const height = Object.hasOwnProperty.call(options, \"height\") ? `${options.height}` : `${DEFAULT_FRAME_HEIGHT}`;\n  const width = Object.hasOwnProperty.call(options, \"width\") ? `${options.width}` : void 0;\n  frame.setAttribute(\"height\", height);\n  if (width) {\n    frame.setAttribute(\"width\", width);\n  } else {\n    frame.setAttribute(\"style\", \"width:100%;\");\n  }\n}\nclass RDC {\n  constructor(port) {\n    this.pending = {};\n    this.port = port;\n    this.port.onmessage = this.messageListener.bind(this);\n  }\n  request({ type, payload }) {\n    return new Promise((resolve, reject) => {\n      const id = genID();\n      this.pending[id] = { resolve, reject };\n      this.port.postMessage({\n        type,\n        payload: {\n          ...payload,\n          // Ensure the payload object includes the request ID\n          __reqid: id\n        }\n      });\n    });\n  }\n  messageListener(event) {\n    if (typeof event.data.payload?.__reqid !== \"string\") {\n      return;\n    }\n    const { type, payload } = event.data;\n    const { __reqid: id, __success: success, __error: error } = payload;\n    if (this.pending[id]) {\n      if (success) {\n        this.pending[id].resolve(this.cleanResult(payload));\n      } else {\n        this.pending[id].reject(error ? `${type}: ${error}` : type);\n      }\n      delete this.pending[id];\n    }\n  }\n  cleanResult(payload) {\n    const result = { ...payload };\n    delete result.__reqid;\n    delete result.__success;\n    delete result.__error;\n    return Object.keys(result).length ? result : null;\n  }\n}\nclass VM {\n  constructor(port, config) {\n    this.editor = {\n      /**\n       * Open one of several files in tabs and/or split panes.\n       *\n       * @since 1.7.0 Added support for opening multiple files\n       */\n      openFile: (path) => {\n        return this._rdc.request({\n          type: \"SDK_OPEN_FILE\",\n          payload: { path }\n        });\n      },\n      /**\n       * Set a project file as the currently selected file.\n       *\n       * - This may update the highlighted file in the file explorer,\n       *   and the currently open and/or focused editor tab.\n       * - It will _not_ open a new editor tab if the provided path does not\n       *   match a currently open tab. See `vm.editor.openFile` to open files.\n       *\n       * @since 1.7.0\n       * @experimental\n       */\n      setCurrentFile: (path) => {\n        return this._rdc.request({\n          type: \"SDK_SET_CURRENT_FILE\",\n          payload: { path }\n        });\n      },\n      /**\n       * Change the color theme\n       *\n       * @since 1.7.0\n       */\n      setTheme: (theme) => {\n        return this._rdc.request({\n          type: \"SDK_SET_UI_THEME\",\n          payload: { theme }\n        });\n      },\n      /**\n       * Change the display mode of the project:\n       *\n       * - `default`: show the editor and preview pane\n       * - `editor`: show the editor pane only\n       * - `preview`: show the preview pane only\n       *\n       * @since 1.7.0\n       */\n      setView: (view) => {\n        return this._rdc.request({\n          type: \"SDK_SET_UI_VIEW\",\n          payload: { view }\n        });\n      },\n      /**\n       * Change the display mode of the sidebar:\n       *\n       * - `true`: show the sidebar\n       * - `false`: hide the sidebar\n       *\n       * @since 1.7.0\n       */\n      showSidebar: (visible = true) => {\n        return this._rdc.request({\n          type: \"SDK_TOGGLE_SIDEBAR\",\n          payload: { visible }\n        });\n      }\n    };\n    this.preview = {\n      /**\n       * The origin (protocol and domain) of the preview iframe.\n       *\n       * In WebContainers-based projects, the origin will always be `null`;\n       * try using `vm.preview.getUrl` instead.\n       *\n       * @see https://developer.stackblitz.com/guides/user-guide/available-environments\n       */\n      origin: \"\",\n      /**\n       * Get the current preview URL.\n       *\n       * In both and EngineBlock and WebContainers-based projects, the preview URL\n       * may not reflect the exact path of the current page, after user navigation.\n       *\n       * In WebContainers-based projects, the preview URL will be `null` initially,\n       * and until the project starts a web server.\n       *\n       * @since 1.7.0\n       * @experimental\n       */\n      getUrl: () => {\n        return this._rdc.request({\n          type: \"SDK_GET_PREVIEW_URL\",\n          payload: {}\n        }).then((data) => data?.url ?? null);\n      },\n      /**\n       * Change the path of the preview URL.\n       *\n       * In WebContainers-based projects, this will be ignored if there is no\n       * currently running web server.\n       *\n       * @since 1.7.0\n       * @experimental\n       */\n      setUrl: (path = \"/\") => {\n        if (typeof path !== \"string\" || !path.startsWith(\"/\")) {\n          throw new Error(`Invalid argument: expected a path starting with '/', got '${path}'`);\n        }\n        return this._rdc.request({\n          type: \"SDK_SET_PREVIEW_URL\",\n          payload: { path }\n        });\n      }\n    };\n    this._rdc = new RDC(port);\n    Object.defineProperty(this.preview, \"origin\", {\n      value: typeof config.previewOrigin === \"string\" ? config.previewOrigin : null,\n      writable: false\n    });\n  }\n  /**\n   * Apply batch updates to the project files in one call.\n   */\n  applyFsDiff(diff) {\n    const isObject = (val) => val !== null && typeof val === \"object\";\n    if (!isObject(diff) || !isObject(diff.create)) {\n      throw new Error(\"Invalid diff object: expected diff.create to be an object.\");\n    } else if (!Array.isArray(diff.destroy)) {\n      throw new Error(\"Invalid diff object: expected diff.destroy to be an array.\");\n    }\n    return this._rdc.request({\n      type: \"SDK_APPLY_FS_DIFF\",\n      payload: diff\n    });\n  }\n  /**\n   * Get the project’s defined dependencies.\n   *\n   * In EngineBlock projects, version numbers represent the resolved dependency versions.\n   * In WebContainers-based projects, returns data from the project’s `package.json` without resolving installed version numbers.\n   */\n  getDependencies() {\n    return this._rdc.request({\n      type: \"SDK_GET_DEPS_SNAPSHOT\",\n      payload: {}\n    });\n  }\n  /**\n   * Get a snapshot of the project files and their content.\n   */\n  getFsSnapshot() {\n    return this._rdc.request({\n      type: \"SDK_GET_FS_SNAPSHOT\",\n      payload: {}\n    });\n  }\n}\nconst connections = [];\nclass Connection {\n  constructor(element) {\n    this.id = genID();\n    this.element = element;\n    this.pending = new Promise((resolve, reject) => {\n      const listenForSuccess = ({ data, ports }) => {\n        if (data?.action === \"SDK_INIT_SUCCESS\" && data.id === this.id) {\n          this.vm = new VM(ports[0], data.payload);\n          resolve(this.vm);\n          cleanup();\n        }\n      };\n      const pingFrame = () => {\n        this.element.contentWindow?.postMessage(\n          {\n            action: \"SDK_INIT\",\n            id: this.id\n          },\n          \"*\"\n        );\n      };\n      function cleanup() {\n        window.clearInterval(interval);\n        window.removeEventListener(\"message\", listenForSuccess);\n      }\n      window.addEventListener(\"message\", listenForSuccess);\n      pingFrame();\n      let attempts = 0;\n      const interval = window.setInterval(() => {\n        if (this.vm) {\n          cleanup();\n          return;\n        }\n        if (attempts >= CONNECT_MAX_ATTEMPTS) {\n          cleanup();\n          reject(\"Timeout: Unable to establish a connection with the StackBlitz VM\");\n          connections.forEach((connection, index) => {\n            if (connection.id === this.id) {\n              connections.splice(index, 1);\n            }\n          });\n          return;\n        }\n        attempts++;\n        pingFrame();\n      }, CONNECT_INTERVAL);\n    });\n    connections.push(this);\n  }\n}\nconst getConnection = (identifier) => {\n  const key = identifier instanceof Element ? \"element\" : \"id\";\n  return connections.find((c) => c[key] === identifier) ?? null;\n};\nfunction createHiddenInput(name, value) {\n  const input = document.createElement(\"input\");\n  input.type = \"hidden\";\n  input.name = name;\n  input.value = value;\n  return input;\n}\nfunction encodeFilePath(path) {\n  return path.replace(/\\[/g, \"%5B\").replace(/\\]/g, \"%5D\");\n}\nfunction createProjectForm({\n  template,\n  title,\n  description,\n  dependencies,\n  files,\n  settings\n}) {\n  if (!PROJECT_TEMPLATES.includes(template)) {\n    const names = PROJECT_TEMPLATES.map((t) => `'${t}'`).join(\", \");\n    console.warn(`Unsupported project.template: must be one of ${names}`);\n  }\n  const inputs = [];\n  const addInput = (name, value, defaultValue = \"\") => {\n    inputs.push(createHiddenInput(name, typeof value === \"string\" ? value : defaultValue));\n  };\n  addInput(\"project[title]\", title);\n  if (typeof description === \"string\" && description.length > 0) {\n    addInput(\"project[description]\", description);\n  }\n  addInput(\"project[template]\", template, \"javascript\");\n  if (dependencies) {\n    if (template === \"node\") {\n      console.warn(\n        `Invalid project.dependencies: dependencies must be provided as a 'package.json' file when using the 'node' template.`\n      );\n    } else {\n      addInput(\"project[dependencies]\", JSON.stringify(dependencies));\n    }\n  }\n  if (settings) {\n    addInput(\"project[settings]\", JSON.stringify(settings));\n  }\n  Object.entries(files).forEach(([path, contents]) => {\n    addInput(`project[files][${encodeFilePath(path)}]`, contents);\n  });\n  const form = document.createElement(\"form\");\n  form.method = \"POST\";\n  form.setAttribute(\"style\", \"display:none!important;\");\n  form.append(...inputs);\n  return form;\n}\nfunction createProjectFrameHTML(project, options) {\n  const form = createProjectForm(project);\n  form.action = embedUrl(\"/run\", options);\n  form.id = \"sb_run\";\n  const html = `<!doctype html>\n<html>\n<head><title></title></head>\n<body>\n  ${form.outerHTML}\n  <script>document.getElementById('${form.id}').submit();<\\/script>\n</body>\n</html>`;\n  return html;\n}\nfunction openNewProject(project, options) {\n  const form = createProjectForm(project);\n  form.action = openUrl(\"/run\", options);\n  form.target = openTarget(options);\n  document.body.appendChild(form);\n  form.submit();\n  document.body.removeChild(form);\n}\nfunction connect(frameEl) {\n  if (!frameEl?.contentWindow) {\n    return Promise.reject(\"Provided element is not an iframe.\");\n  }\n  const connection = getConnection(frameEl) ?? new Connection(frameEl);\n  return connection.pending;\n}\nfunction openProject(project, options) {\n  openNewProject(project, options);\n}\nfunction openProjectId(projectId, options) {\n  const url = openUrl(`/edit/${projectId}`, options);\n  const target = openTarget(options);\n  window.open(url, target);\n}\nfunction openGithubProject(repoSlug, options) {\n  const url = openUrl(`/github/${repoSlug}`, options);\n  const target = openTarget(options);\n  window.open(url, target);\n}\nfunction embedProject(elementOrId, project, options) {\n  const element = findElement(elementOrId);\n  const html = createProjectFrameHTML(project, options);\n  const frame = document.createElement(\"iframe\");\n  replaceAndEmbed(element, frame, options);\n  frame.contentDocument?.write(html);\n  return connect(frame);\n}\nfunction embedProjectId(elementOrId, projectId, options) {\n  const element = findElement(elementOrId);\n  const frame = document.createElement(\"iframe\");\n  frame.src = embedUrl(`/edit/${projectId}`, options);\n  replaceAndEmbed(element, frame, options);\n  return connect(frame);\n}\nfunction embedGithubProject(elementOrId, repoSlug, options) {\n  const element = findElement(elementOrId);\n  const frame = document.createElement(\"iframe\");\n  frame.src = embedUrl(`/github/${repoSlug}`, options);\n  replaceAndEmbed(element, frame, options);\n  return connect(frame);\n}\nconst StackBlitzSDK = {\n  connect,\n  embedGithubProject,\n  embedProject,\n  embedProjectId,\n  openGithubProject,\n  openProject,\n  openProjectId\n};\n\n//# sourceMappingURL=sdk.m.js.map\n//# sourceURL=[module]\n//# sourceMappingURL=data:application/json;charset=utf-8;base64,\n//# sourceURL=webpack-internal:///(ssr)/./node_modules/@stackblitz/sdk/bundles/sdk.m.js\n");

/***/ })

};
;